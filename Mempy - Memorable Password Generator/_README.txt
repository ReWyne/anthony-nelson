LEGAL
##################################################
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

CONCEPTUAL BACKING
##################################################
Goal: create passwords that are easy to remember and impossible to guess.

My solution is a simple password generator based on early 2017 cracking methods.
It was constructed around the correct-horse-battery-staple password generation
method, but with the addition of a dictionary of "secret words" made up by the
user. But why do we need these?

The correct-horse-battery-staple method guarantees
[number of words] * log([size of dictionary])
bits of entropy. This means that, working from a 10,000 word known dictionary
(such as the one provided), you need 5 or 6 words to have a reasonably secure
password and 6 or 7 words to have a password definitely secure against current
(2017) technology.

But 6 words is already quite a lot to remember. Is there any way to cut down on that?

What if one of those words wasn't in any dictionary? If this were the case, and
the rules for generating this word were unkown, it would have to be treated as a
random string. If the word were at least 5 or 6 characters long, it would add
about as much entropy as two words from the dictionary, making a 5 word password
adequately secure.

Of course, in practice, a human-generated "secret word" won't add as many bits
of entropy as a random string of the same length. However, unless the attacker
knows that this particular dictionary and algorithm is being used, this is more
than offset by other factors. In fact, it is extremely likely that brute force
attacks which do not utilize some form of AI will have resorted to an unpruned
brute force search (treating the password as a completely random string) long
before trying this algorithm. Treating this password (which is at minimum 4
3-character words + 1 5-character secret word + 4 separators = 21 characters
long) as a random string gives it effectively ~124 bits of entropy, give or take
a few bits depending on how many special characters are included in the alphabet
used.

The end result? As long as your secret dictionary remains secret, and the
guidelines for generating secret words are followed, this algorithm generates
a password that is just secure enough for casual use if the exact algorithm
used to generate it is known and completely unguessable otherwise.

If you want a password that is definitely secure even if the exact algorithm
used is known, increase the number of words used from 5 to 6 with the
"--pCount [desired number of passwords]" option.

If you don't trust yourself to generate sufficiently random words, use the
"--randomsecrets" to generate a 5-8 character random string instead of using
your secret dictionary.

CRASH COURSE TO PASSWORD SECURITY
##################################################
One bit of entropy is equivalent to one coin flip. It is the basic unit of
password strength.

Each added bit of entropy doubles how long a brute force attack would take
to crack your password.

If you are not paranoid, I would recommend an 80+ bit password. If you are,
the sky's the limit, but anything over 90 is overkill (pre-quantum computing).

Examples:
- Choosing the correct sequence of 10 coin flips (ex - HTTHTHTHHH) is 10 bits of entropy (2^10 = 1024 possible sequences).
- Choosing the correct randomly-generated 10-character alphanumeric string is worth [number of characters]*log([alphabet size]) bits of entropy. This is ~52 bits if you don't include uppercase letters and ~59 bits if you do.
- 7 random words from a 10,000 word dictionary is ~93 bits of entropy, which is definitely secure.

Keep in mind that these calculations assume that you are using a
cryptographically secure source of randomness to create your password. Passwords
generated by humans and/or reused from other sources are MUCH less secure.

I'll say it again: NEVER reuse passwords, unless you're comfortable with
having everything you were using that password for hacked, losing those
accounts and giving all of their data to a malicious entity in the process.

Choosing a password that you like from a list of computer-generated passwords
also makes the chosen password less secure, removing log([list size])
bits of entropy from the password in the worst case.

For a slightly more in-depth crash course, I recommend http://www.genaud.net/2013/11/password-cracking/password-cracking-v0.html

RULES FOR GENERATING YOUR SECRET DICTIONARY
##################################################
- These words must be words that do not exist in any dictionary (or at the very least, only in extremely obscure ones).
- The words should also contain uppercase letters and/or special characters.
- The words should also be at least 5 or 6 characters long.
- The list should be large enough that reuse of secret words between passwords is unlikely. (Really, you should make sure that such reuse NEVER happens. The --noreuse feature helps with this.)
- The words should also be memorable to the user, although the final password will be more secure against AI-based brute force attacks if they are computer-generated instead of human-generated.

HOW TO USE
##################################################
- You will need Python 2.7 or newer installed on your computer to run this program. Download python at https://www.python.org/downloads/
- A set of example secret words is provide in the file "secretwords.txt". Replace the words in this file with your own, following the "rules for generating your secret dictionary" section above. Note that the example words are not computer-generated and thus not optimally secure, but are an example of "good enough" secret words.
- Once you have created your secret words, navigate to the folder containing this program (probably using the "cd [path to folder]" command) in Command Prompt, Terminal, or your operating system's equivalent and run something like "python PASS.py --noreuse" to generate some passwords.
- For additional options, run "python PASS.py --help" or modify this program's source code. (which should be easy, since it's written in python)

PS: If random.SystemRandom doesn't work on your operating system...then you
probably have the technical knowledge to find/write a cryptographically secure
random number generator that does. If you don't, then I recommend that you
start downloading an OS that implements os.urandom (any standard OS) and try
an online generator such as https://passwordsgenerator.net in the mean time.